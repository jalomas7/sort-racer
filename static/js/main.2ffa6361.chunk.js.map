{"version":3,"sources":["utils/color.ts","utils/shuffle.ts","providers/GameContextProvider.tsx","providers/BallContextProvider.tsx","components/Modal.tsx","components/GameWon.tsx","components/Ball.tsx","components/BallStack.tsx","components/Player.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomHexColor","brightness","values","color","i","concat","Math","min","floor","random","length","shuffle","a","j","v","k","GameContext","createContext","players","gameWon","declareWinner","playerStacks","ballColors","resetGame","useGameContext","useContext","createBallStack","colors","balls","ball","id","uuid","push","GameContextProvider","children","useState","setBallColors","setPlayerStacks","setGameWon","winner","setWinner","n","newColor","some","getRandomHexColors","stacks","forEach","player","useEffect","value","Provider","defaultBallContext","activeBall","undefined","setActiveBall","onDrag","onDrop","BallContext","useBallContext","BallProvider","playerId","ballStack","useMemo","checkIfWinner","useCallback","playerWon","Object","keys","firstBallColor","stackId","shift","unshift","ModalContainer","styled","div","open","backgroundColor","Modal","others","GameWonContainer","background","pureColor","slice","parseInt","isDark","GameWonResetButton","button","GameWonHeader","h1","GameWon","setColor","onClick","BallContainer","x","y","active","Ball","isActive","BallStackContainer","BallStackVase","BallStack","onMouseDown","onMouseUp","map","key","PlayerContainer","Player","xPos","setXPos","yPos","setYPos","onMouseMoveCapture","e","preventDefault","clientX","clientY","Fragment","AppContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ffa6361.chunk.js","sourcesContent":["export const getRandomHexColor = (brightness=0): string => {\n    const values: string = '0123456789ABCDEF';\n    let color = '#';\n    for(let i = 0; i < 6; i++) {\n        color = color.concat(values[Math.min(Math.floor(Math.random() * values.length + brightness), values.length - 1)]);\n    }\n    return color;\n};\n\nexport const getRandomHexColors = (n=1, brightness=0): string[] => {\n    const colors: string[] = [];\n\n    for(let i=0; i < n; i++) {\n        const newColor: string = getRandomHexColor(brightness);\n        if(colors.some(v => v === newColor)) {\n            i--;\n            continue;\n        }\n\n        colors.push(newColor)\n    }\n\n    return colors;\n\n}\n\nexport const isDark = (color: string): boolean => {\n    if (!color) {\n        return false;\n    }\n\n    const pureColor = color.slice(1, color.length);\n\n    if (pureColor.length !== 6) {\n        return false;\n    }\n\n    const R = parseInt(pureColor.slice(0, 2), 16);\n    const G = parseInt(pureColor.slice(2, 4), 16);\n    const B = parseInt(pureColor.slice(4, 6), 16);\n\n    return R + G + B < 382;\n};","export const shuffle = <T = any>(a: T[]): T[] => {\n  for (let i = 0; i < a.length; i++) {\n    const j: number = Math.floor(Math.random() * a.length);\n    const v = a[i];\n    const k = a[j];\n    a[i] = k;\n    a[j] = v;\n  }\n\n  return a;\n};\n","import React, {\n  createContext,\n  useContext,\n  FunctionComponent,\n  useEffect,\n  useState,\n} from \"react\";\nimport { getRandomHexColors, shuffle } from \"../utils\";\nimport { v4 as uuid } from \"uuid\";\nimport { Ball, PlayerStacks } from \"../types\";\n\nexport type GameContextType = {\n  players: string[];\n  playerStacks: PlayerStacks;\n  ballColors: string[];\n  gameWon: boolean;\n  declareWinner: (winner: string) => void;\n  resetGame: () => void;\n  winner?: string;\n};\n\nconst defaultGameContext: GameContextType = {\n  players: [],\n  gameWon: false,\n  declareWinner: () => {},\n  playerStacks: {},\n  ballColors: [],\n  resetGame: () => {},\n};\n\nconst GameContext = createContext(defaultGameContext);\n\nexport const useGameContext = () => useContext(GameContext);\n\nconst createBallStack = (colors: string[]): Ball[] => {\n  const balls: Ball[] = [];\n  for (let i = 0; i < colors.length; i++) {\n    const color = colors[i];\n    const ball: Ball = {\n      id: uuid(),\n      color,\n    };\n    balls.push(ball);\n  }\n\n  return balls;\n};\n\nexport type GameContextProviderProps = {\n  players: string[];\n};\n\nexport const GameContextProvider: FunctionComponent<GameContextProviderProps> = ({\n  children,\n  players,\n}) => {\n  const [ballColors, setBallColors] = useState<string[]>([]);\n  const [playerStacks, setPlayerStacks] = useState<PlayerStacks>({});\n  const [gameWon, setGameWon] = useState<boolean>(false);\n  const [winner, setWinner] = useState<string>();\n\n  const resetGame = () => {\n    setGameWon(false);\n    const colors: string[] = getRandomHexColors(4, 2);\n    setBallColors(colors);\n    const stacks: PlayerStacks = {};\n    players.forEach((player) => {\n      for (let i = 0; i < colors.length + 1; i++) {\n        stacks[player] = {\n          ...stacks[player],\n          [uuid()]: { balls: createBallStack(shuffle<string>(colors)) },\n        };\n      }\n    });\n    setPlayerStacks(stacks);\n  };\n\n  useEffect(() => {\n    resetGame();\n  }, []); //eslint-disable-line react-hooks/exhaustive-deps\n\n  const declareWinner = (winner: string) => {\n    setGameWon(true);\n    setWinner(winner);\n  };\n\n  const value: GameContextType = {\n    players,\n    ballColors,\n    playerStacks,\n    declareWinner,\n    gameWon,\n    resetGame,\n    winner\n  };\n\n  return <GameContext.Provider value={value}>{children}</GameContext.Provider>;\n};\n","import React, {\n  createContext,\n  useContext,\n  FunctionComponent,\n  useState,\n  Dispatch,\n  SetStateAction,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport { Ball } from \"../types\";\nimport { useGameContext } from \"./GameContextProvider\";\n\nexport type BallContextType = {\n  activeBall: Ball | undefined;\n  setActiveBall: Dispatch<SetStateAction<Ball | undefined>>;\n  onDrag: (stackId: string) => void;\n  onDrop: (stackId: string) => void;\n};\n\nconst defaultBallContext: BallContextType = {\n  activeBall: undefined,\n  setActiveBall: () => {},\n  onDrag: () => {},\n  onDrop: () => {},\n};\n\nconst BallContext = createContext(defaultBallContext);\n\nexport const useBallContext = () => useContext(BallContext);\n\nexport type BallProviderProps = {\n  playerId: string;\n};\n\nexport const BallProvider: FunctionComponent<BallProviderProps> = ({\n  children,\n  playerId,\n}) => {\n  const [activeBall, setActiveBall] = useState<Ball>();\n  const { playerStacks, declareWinner } = useGameContext();\n  const ballStack = useMemo(() => playerStacks[playerId], [\n    playerId,\n    playerStacks,\n  ]);\n\n  const checkIfWinner = useCallback(() => {\n    let playerWon: boolean = true;\n\n    if (!ballStack) {\n      return;\n    }\n\n    Object.keys(ballStack).forEach((id) => {\n      if (ballStack[id].balls.length < 1) {\n        return;\n      }\n      const firstBallColor = ballStack[id].balls[0].color;\n      ballStack[id].balls.forEach((ball) => {\n        if (ball.color !== firstBallColor) {\n          playerWon = false;\n          return;\n        }\n      });\n    });\n    if (playerWon) {\n      declareWinner(playerId);\n      return;\n    }\n  }, [ballStack, playerId, declareWinner]);\n\n  const onDrag = useCallback(\n    (stackId: string) => {\n      const ball = playerStacks[playerId][stackId].balls.shift();\n      setActiveBall(ball);\n    },\n    [playerStacks[playerId]] //eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const onDrop = useCallback(\n    (stackId: string) => {\n      const balls = playerStacks[playerId][stackId].balls;\n      if (!activeBall || balls.length > 4) {\n        return;\n      }\n\n      balls.unshift(activeBall);\n      setActiveBall(undefined);\n      checkIfWinner();\n    },\n    [playerStacks[playerId], activeBall] //eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const value: BallContextType = {\n    activeBall,\n    setActiveBall,\n    onDrag,\n    onDrop,\n  };\n\n  return <BallContext.Provider value={value}>{children}</BallContext.Provider>;\n};\n","import React, { FunctionComponent } from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport type ModalProps = {\n  open: boolean;\n  backgroundColor?: string;\n};\n\nconst ModalContainer = styled.div<ModalProps>`\n  height: 100%;\n  width: 100%;\n  visibility: ${({ open }) => (open ? \"visible\" : \"hidden\")};\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  position: absolute;\n  z-index: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Modal: FunctionComponent<ModalProps> = ({\n  backgroundColor = \"transparent\",\n  children,\n  ...others\n}) => (\n  <ModalContainer backgroundColor={backgroundColor} {...others}>\n    {children}\n  </ModalContainer>\n);\n\nexport default Modal;\n","import React, { useState, useEffect } from \"react\";\nimport { useGameContext } from \"../providers\";\nimport Modal from \"./Modal\";\nimport { getRandomHexColor, isDark } from \"../utils\";\nimport styled from \"@emotion/styled\";\n\nconst GameWonContainer = styled.div<{ background: string }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: ${({ background }) => background};\n  color: ${({ background }) => (isDark(background) ? \"white\" : \"black\")};\n  padding: 10em;\n`;\n\nconst GameWonResetButton = styled.button`\n  outline: none;\n`;\n\nconst GameWonHeader = styled.h1``;\n\nconst GameWon = () => {\n  const { gameWon, resetGame, winner } = useGameContext();\n  const [color, setColor] = useState(\"transparent\");\n\n  useEffect(() => {\n    setColor(getRandomHexColor());\n  }, []);\n\n  return (\n    <Modal open={gameWon} backgroundColor={'rgba(0,0,0,0.8)'}>\n      <GameWonContainer background={color}>\n        <GameWonHeader>{winner} wins!!!</GameWonHeader>\n        <GameWonResetButton onClick={resetGame}>Play Again</GameWonResetButton>\n      </GameWonContainer>\n    </Modal>\n  );\n};\n\nexport default GameWon;\n","import React, { FunctionComponent } from \"react\";\nimport { getRandomHexColor } from \"../utils\";\nimport styled from \"@emotion/styled\";\nimport { useBallContext } from \"../providers\";\n\nexport type BallProps = {\n  id: string;\n  color?: string;\n  x?: number;\n  y?: number;\n};\n\nconst BallContainer = styled.div<{\n  color: string;\n  active: boolean;\n  x: number;\n  y: number;\n}>`\n  left: ${({x}) => x-25}px;\n  top: ${({y}) => y-25}px;\n  border-radius: 100%;\n  background: radial-gradient(\n    circle at 25px 10px,\n    ${({ color }) => color},\n    #000\n  );\n  min-width: 50px;\n  min-height: 50px;\n  position: ${({ active }) => (active ? \"absolute\" : \"unset\")};\n  pointer-events: ${({ active }) => (active ? \"none\" : \"unset\")};\n`;\n\nconst Ball: FunctionComponent<BallProps> = ({\n  id,\n  color = getRandomHexColor(),\n  x = 0,\n  y = 0,\n}) => {\n  const { activeBall } = useBallContext();\n  const isActive: boolean = (activeBall && activeBall.id === id) || false;\n\n  return <BallContainer color={color} active={isActive} x={x} y={y}/>;\n};\n\nexport default Ball;\n","import React, { FunctionComponent } from \"react\";\nimport BallComponent from \"./Ball\";\nimport styled from \"@emotion/styled\";\nimport { Ball } from \"../types\";\nimport { useBallContext } from \"../providers\";\n\nconst BallStackContainer = styled.div`\n  min-width: 55px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  position: relative;\n  margin: 0 10px 25% 10px;\n  align-self: flex-end;\n`;\n\nconst BallStackVase = styled.div`\n  width: 100%;\n  height: 250px;\n  border-radius: 10px;\n  background-color: rgba(0, 0, 0, 0.2);\n  position: absolute;\n  bottom: 0;\n  background: linear-gradient(\n    to left,\n    rgba(0, 0, 0, 0.5),\n    rgba(0, 0, 0, 0.4),\n    rgba(0, 0, 0, 0.5)\n  );\n`;\n\nexport type BallStackProps = {\n  id: string;\n  balls: Ball[];\n};\n\nconst BallStack: FunctionComponent<BallStackProps> = ({ balls, id }) => {\n  const { onDrag, onDrop, activeBall } = useBallContext();\n\n  return (\n    <BallStackContainer\n      onMouseDown={() => !activeBall && onDrag(id)}\n      onMouseUp={() => activeBall && onDrop(id)}\n      onClick={() => {\n        activeBall && onDrop(id);\n      }}\n    >\n      <BallStackVase />\n      {balls.map(({ color, id }) => (\n        <BallComponent color={color} key={id} id={id} />\n      ))}\n    </BallStackContainer>\n  );\n};\n\nexport default BallStack;\n","import React, { useState, FunctionComponent } from \"react\";\nimport styled from \"@emotion/styled\";\nimport BallStack from \"./BallStack\";\nimport Ball from \"./Ball\";\nimport { useBallContext, useGameContext } from \"../providers\";\n\nconst PlayerContainer = styled.div`\n  display: flex;\n  background-color: #282c34;\n  min-height: 15em;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  border: 5px solid white;\n  margin: 0 10px;\n`;\n\nexport type PlayerProps = {\n  playerId: string;\n};\n\nconst Player: FunctionComponent<PlayerProps> = ({ playerId }) => {\n  const { activeBall } = useBallContext();\n  const { playerStacks } = useGameContext();\n  const [xPos, setXPos] = useState<number>(0);\n  const [yPos, setYPos] = useState<number>(0);\n\n  const updateActiveBallPos = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setXPos(e.clientX);\n    setYPos(e.clientY);\n  };\n\n  if(!playerStacks[playerId]) {\n    return <React.Fragment />\n  }\n\n  return (\n    <PlayerContainer onMouseMoveCapture={updateActiveBallPos} id={playerId}>\n      {Object.keys(playerStacks[playerId]).map((id) => (\n        <BallStack balls={playerStacks[playerId][id].balls} key={id} id={id} />\n      ))}\n      {activeBall && (\n        <Ball x={xPos} y={yPos} color={activeBall.color} id={activeBall.id} />\n      )}\n    </PlayerContainer>\n  );\n};\n\nexport default Player;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { GameWon, Player } from \"./components\";\nimport { BallProvider, useGameContext } from \"./providers\";\n\nconst AppContainer = styled.div`\n  display: flex;\n  background-color: #282c34;\n  min-height: 100vh;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst App = () => {\n  const { players } = useGameContext();\n\n  return (\n    <AppContainer>\n      <GameWon />\n      {players.map((player) => (\n        <BallProvider playerId={player}>\n          <Player playerId={player}/>\n        </BallProvider>\n      ))}\n    </AppContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {GameContextProvider} from './providers';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameContextProvider players={['player 1', 'player 2']}>\n      <App />\n    </GameContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}